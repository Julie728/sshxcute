#labels Featured
=1. 概述=
正如名字所示，SSHXCUTE是一个框架。它允许工程师利用Java代码通过SSH连接远程执行Linux/UNIX系统上的命令或者脚本，这种方式不管是针对软件测试还是系统部署，都简化了自动化测试与系统环境部署的步骤。

SSHXCUTE的设计旨在：
  * 最小的系统需求 – 仅仅开启SSH连接即可。
  * 易用性 – 工程师利用Java代码执行命令或脚本。
  * 内置命令/脚本任务执行功能。
  * 易扩展 – 用户可以自定义任务类型并集成于sshxcute框架。

=2. 适用范围与限制=
==2.1 限制==
远程Linux/UNIX机器必须开启SSH连接，并且需要用户名密码认证登录。
你只能将sshxcute的jar引入你的基于Java的项目才能使用。

==2.2 适用范围==
*场景1.* 如果你有一大堆命令或者脚本需要在远程机器上跑一跑（比如部署一下开发或者生产环境），而这些手动输入命令的工作又是如此的无聊，你也不想花功夫去编写一个脚本统一调用这些命令或脚本。更好的情况是你在用Java IDE（比如Eclipse），好的！为什么不试试sshxcute呢? 在你的工作主机比如windows或ubuntu上执行命令，那看着多惬意啊~

*场景2.* 你的自动化工具是用Java写的，你有一些需求需要在远程的Linux/UNIX服务器上执行一些命令或脚本，sshxcute正你的大爱！把sshxcute.jar导入到你的项目中，你就可以神奇般的调用它的API了！开始远程执行旅行~

=3. 使用指南=
首先，你必须确保sshxcute.jar已经在你的JRE的$CLASSPATH中，然后你才可以开始。接下来展示的如何在Eclipse IDE中配置Java Build Path。右键单击项目 > 属性 > Java构建路径。更多的配置步骤请上网搜索。

http://neoremind.net/wp-content/uploads/2010/09/howtoimport.jpg

==3.1初始化准备工作==
通常当我们需要在远程Linux/UNIX系统上执行命令时，以下是必须的步骤：

  * 1) 打开SSH连接客户端（例如Putty）
  * 2) 输入IP
  * 3) 输入用户名、密码登陆
  * 4) 登陆成功后输入命令行
  * 5) 断开登陆

前三个步骤可以通过sshxcute的Java API模拟实现：
{{{
// 新建一个ConnBean对象，三个参数依次是ip地址、用户名、密码
ConnBean cb = new ConnBean("ip ", "username","password");
// 将上面新建的ConnBean作为参数传递给SSHExec的静态单例方法，得到一个SSHExec的实例
getInstance(ConnBean) to retrieve a singleton SSHExec instance
ssh = SSHExec.getInstance(cb);		
// 利用上面得到的SSHExec实例连接主机
ssh.connect();
}}}

第五步实现如下：
{{{
ssh.disconnect();
}}}
	
第四步是才是SSHEXEC框架的核心所在——执行命令或者脚本。接下来的部分将主要介绍这个主题。


==3.2 远程执行命令==
让我们先来看一段代码再来详细解释。因为如果你已经具备了面向对象编程经验，你将会发现这是如此的简单。
{{{
CustomTask sampleTask = new ExecCommand("echo 123");
ssh.exec(sampleTask);
}}}

ExecCommand类集成了CustomTask类，我们新建一个ExecCommand对象，他的引用类型是CustomTask。下图展示了ExecCommand、ExecShellScript和CustomTask的类图，从中可以看出他们的关系。

http://neoremind.net/wp-content/uploads/2010/09/sshxcute_classdiagram.jpg

ExecCommand的构造函数只接收一个字符串类型变量。注意ExecCommand可以执行多个命令，只需要用分隔符“;”分隔各个命令即可。例如：
{{{
CustomTask sampleTask = new ExecCommand("echo 123; echo 456; echo 789");
}}}

ExecCommand的构造函数是：
  * `public ExecCommand(String...args)`

把ExecCommand对象作为参数传入SSHExec.exec(CustomTask)方法，这样就可以直接运行了。

==3.3 远程执行shell脚本==
远程执行shell脚本几乎与3.2小节的远程执行命令一致。例如，如果你想执行/home/tsadmin路径下的sshxcute_test.sh脚本，并且带两个参数“hello world”，你可以这样调用：
{{{
CustomTask ct1 = new ExecShellScript("/home/tsadmin","./sshxcute_test.sh","hello world");
ssh.exec(ct1);
}}}

ExecShellScript的构造函数是：
  * `public ExecShellScript(String workingDir, String shellPath, String args)`
	
  * `public ExecShellScript(String shellPath, String args)`
	
  * `public ExecShellScript(String shellPath)`


==3.4 上传文件==
我们会遇到一种情况，要执行的脚本是存在于我们本地的，我们必须先把其上传到远程的机器上。这项工作sshxcute同样可以为我们完成，例如，我们想要把c:/data2/data目录下的所有文件上传到远程机器上的/home/tsadmin目录下，我们可以
{{{
ssh.uploadAllDataToServer("c:/data2/data", "/home/tsadmin");
}}}

如果想只上传单一文件，例如只上传项目路径下的data/sshxcute_test.sh到/home/tsadmin，我们可以这样
{{{
ssh.uploadSingleDataToServer("data/sshxcute_test.sh","/home/tsadmin");
}}}

这里要注意下，我们必须把顺序搞清楚，上传的步骤必须在执行前，连接成功后。例如：
{{{
CustomTask ct2 = new ExecShellScript("/home/tsadmin","./sshxcute_test.sh","hello world");
ssh.connect();  // 连接成功后
ssh.uploadSingleDataToServer("data/sshxcute_test.sh", "/home/tsadmin");
ssh.exec(ct1);  // 执行前
}}}

当然这里不仅仅限于必须执行脚本，如果你只想上传文件可以单独执行uploadSingleDataToServer与uploadSingleDataToServer方法。

==3.5 结果对象==
所有的任务类型，包括我们上面已经讲解过的ExecCommand、ExecShellScript还有我们接下来会说明的自定义类任务，在执行完毕后，都会返回一个结果对象（Result）。这个结果对象包含了命令或者脚本的返回代码（return code）、标准输入、错误输出。还有它会提供一个布尔类型的isSuccess变量供程序员判断是否任务执行成功，在4.1章节我们将会详细介绍sshxcute是如何判断任务执行成功与否的，这个判断的条件也是可以配置的。

例如，我们的SSHExec.exec(CustomTask)总会返回一个结果对象，我们可以利用自己的逻辑代码打印一些有用的信息。
{{{
Result res = ssh.exec(task);
if (res.isSuccess)
{
	System.out.println("Return code: " + res.rc);
	System.out.println("sysout: " + res.sysout);
}
else
{
	System.out.println("Return code: " + res.rc);
	System.out.println("error message: " + res.error_msg);
}
}}}

==3.6 总结==
下面我们举个例子囊括上面所有的技术话题，做个总结。
假设我们想在远程的Linux服务器（ip是9.125.71.115）上执行一个shell脚本。sshxcute_test.sh的内容请见附录A。代码如下：
{{{
// 新建一个SSHExec引用
SSHExec ssh = null;
// 我们下面所有的代码都放在try-catch块中
try {
    // 实例化一个ConnBean对象，参数依次是IP地址、用户名和密码
    ConnBean cb = new ConnBean("9.125.71.115", "username","password");
    // 将刚刚实例化的ConnBean对象作为参数传递给SSHExec的单例方法得到一个SSHExec对象
    ssh = SSHExec.getInstance(cb);		
    // 新建一个ExecCommand对象，引用必须是其继承的CustomTask类
    CustomTask ct1 = new ExecCommand("chmod 755 /home/tsadmin/sshxcute_test.sh");
    // 新建一个ExecShellScript对象，引用必须是其继承的CustomTask类
    CustomTask ct2 = new ExecShellScript("/home/tsadmin","./sshxcute_test.sh","hello world");
    // 连接服务器
    ssh.connect();
    // 上传shell脚本到/home/tsadmin目录
    ssh.uploadSingleDataToServer("data/sshxcute_test.sh", "/home/tsadmin");
    // 执行命令
    ssh.exec(ct1);
    // 执行脚本并且返回一个Result对象
    Result res = ssh.exec(ct2);
    // 检查执行结果，如果执行成功打印输出，如果执行失败，打印错误信息
    if (res.isSuccess)
    {
        System.out.println("Return code: " + res.rc);
        System.out.println("sysout: " + res.sysout);
    }
    else
    {
	System.out.println("Return code: " + res.rc);
	System.out.println("error message: " + res.error_msg);
    }
} 
catch (TaskExecFailException e) 
{
    System.out.println(e.getMessage());
    e.printStackTrace();
} 
catch (Exception e) 
{
    System.out.println(e.getMessage());
    e.printStackTrace();
} 
finally 
{
    ssh.disconnect();	
}
}}}


*输出：*
{{{
SSHExec initializing ...
Session initialized and associated with user credential tsadmin123
SSHExec initialized successfully
SSHExec trying to connect username@9.125.71.115
SSH connection established
Ready to transfer local file 'data/sshxcute_test.sh' to server directory '/home/tsadmin'
Connection channel established succesfully
Start to upload
Upload success
channel disconnect
Command is chmod 755 /home/tsadmin/sshxcute_test.sh
Connection channel established succesfully
Start to run command
Connection channel closed
Check if exec success or not ... 
Execute successfully for command: chmod 755 /home/tsadmin/sshxcute_test.sh
Now wait 5 seconds to begin next task ...
Connection channel disconnect
Command is cd /home/tsadmin ; ./sshxcute_test.sh hello world 
Connection channel established succesfully
Start to run command
Login success

Connection channel closed
Check if exec success or not ... 
Execute successfully for command: cd /home/tsadmin ; ./sshxcute_test.sh hello world 
Now wait 5 seconds to begin next task ...
Connection channel disconnect
R1 Return code: 0
R1 sysout: Login success

SSH connection shutdown
}}}


==3.7 日志==
所有的输出与日志都将保存在你执行SSHXCUTE的路径下。如果你讲sshxcute.jar导入到你的Eclipse项目中，日志名称是sshxcute.log，它保存在项目的根目录下。